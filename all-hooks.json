{
    "https://github.com/pre-commit/pre-commit-hooks": [
        {
            "id": "autopep8-wrapper",
            "name": "autopep8 wrapper (removed)",
            "description": "(removed) use pre-commit/mirrors-autopep8 instead.",
            "entry": "pre-commit-hooks-removed autopep8-wrapper autopep8 https://github.com/pre-commit/mirrors-autopep8",
            "language": "python",
            "always_run": true,
            "pass_filenames": false
        },
        {
            "id": "check-added-large-files",
            "name": "Check for added large files",
            "description": "Prevent giant files from being committed",
            "entry": "check-added-large-files",
            "language": "python"
        },
        {
            "id": "check-ast",
            "name": "Check python ast",
            "description": "Simply check whether the files parse as valid python.",
            "entry": "check-ast",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-byte-order-marker",
            "name": "Check for byte-order marker",
            "description": "Forbid files which have a UTF-8 byte-order marker",
            "entry": "check-byte-order-marker",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-builtin-literals",
            "name": "Check builtin type constructor use",
            "description": "Require literal syntax when initializing empty or zero Python builtin types.",
            "entry": "check-builtin-literals",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-case-conflict",
            "name": "Check for case conflicts",
            "description": "Check for files that would conflict in case-insensitive filesystems",
            "entry": "check-case-conflict",
            "language": "python"
        },
        {
            "id": "check-docstring-first",
            "name": "Check docstring is first",
            "description": "Checks a common error of defining a docstring after code.",
            "entry": "check-docstring-first",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "check-executables-have-shebangs",
            "name": "Check that executables have shebangs",
            "description": "Ensures that (non-binary) executables have a shebang.",
            "entry": "check-executables-have-shebangs",
            "language": "python",
            "types": [
                "text",
                "executable"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "check-json",
            "name": "Check JSON",
            "description": "This hook checks json files for parseable syntax.",
            "entry": "check-json",
            "language": "python",
            "types": [
                "json"
            ]
        },
        {
            "id": "pretty-format-json",
            "name": "Pretty format JSON",
            "description": "This hook sets a standard for formatting JSON files.",
            "entry": "pretty-format-json",
            "language": "python",
            "types": [
                "json"
            ]
        },
        {
            "id": "check-merge-conflict",
            "name": "Check for merge conflicts",
            "description": "Check for files that contain merge conflict strings.",
            "entry": "check-merge-conflict",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-symlinks",
            "name": "Check for broken symlinks",
            "description": "Checks for symlinks which do not point to anything.",
            "entry": "check-symlinks",
            "language": "python",
            "types": [
                "symlink"
            ]
        },
        {
            "id": "check-toml",
            "name": "Check Toml",
            "description": "This hook checks toml files for parseable syntax.",
            "entry": "check-toml",
            "language": "python",
            "types": [
                "toml"
            ]
        },
        {
            "id": "check-vcs-permalinks",
            "name": "Check vcs permalinks",
            "description": "Ensures that links to vcs websites are permalinks.",
            "entry": "check-vcs-permalinks",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-xml",
            "name": "Check Xml",
            "description": "This hook checks xml files for parseable syntax.",
            "entry": "check-xml",
            "language": "python",
            "types": [
                "xml"
            ]
        },
        {
            "id": "check-yaml",
            "name": "Check Yaml",
            "description": "This hook checks yaml files for parseable syntax.",
            "entry": "check-yaml",
            "language": "python",
            "types": [
                "yaml"
            ]
        },
        {
            "id": "debug-statements",
            "name": "Debug Statements (Python)",
            "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.",
            "entry": "debug-statement-hook",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "detect-aws-credentials",
            "name": "Detect AWS Credentials",
            "description": "Detects *your* aws credentials from the aws cli credentials file",
            "entry": "detect-aws-credentials",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "detect-private-key",
            "name": "Detect Private Key",
            "description": "Detects the presence of private keys",
            "entry": "detect-private-key",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "double-quote-string-fixer",
            "name": "Fix double quoted strings",
            "description": "This hook replaces double quoted strings with single quoted strings",
            "entry": "double-quote-string-fixer",
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "end-of-file-fixer",
            "name": "Fix End of Files",
            "description": "Ensures that a file is either empty, or ends with one newline.",
            "entry": "end-of-file-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        },
        {
            "id": "file-contents-sorter",
            "name": "File Contents Sorter",
            "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.",
            "entry": "file-contents-sorter",
            "language": "python",
            "files": "^$"
        },
        {
            "id": "fix-encoding-pragma",
            "name": "Fix python encoding pragma",
            "language": "python",
            "entry": "fix-encoding-pragma",
            "description": "Add # -*- coding: utf-8 -*- to the top of python files",
            "types": [
                "python"
            ]
        },
        {
            "id": "flake8",
            "name": "Flake8 (removed)",
            "description": "(removed) use gitlab.com/pycqa/flake8 instead.",
            "entry": "pre-commit-hooks-removed flake8 flake8 https://gitlab.com/pycqa/flake8",
            "language": "python",
            "always_run": true,
            "pass_filenames": false
        },
        {
            "id": "forbid-new-submodules",
            "name": "Forbid new submodules",
            "language": "python",
            "entry": "forbid-new-submodules",
            "description": "Prevent addition of new git submodules"
        },
        {
            "id": "mixed-line-ending",
            "name": "Mixed line ending",
            "description": "Replaces or checks mixed line ending",
            "entry": "mixed-line-ending",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "name-tests-test",
            "name": "Tests should end in _test.py",
            "description": "This verifies that test files are named correctly",
            "entry": "name-tests-test",
            "language": "python",
            "files": "(^|/)tests/.+\\.py$"
        },
        {
            "id": "no-commit-to-branch",
            "name": "Don't commit to branch",
            "entry": "no-commit-to-branch",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        },
        {
            "id": "pyflakes",
            "name": "Pyflakes (removed)",
            "description": "(removed) use gitlab.com/pycqa/flake8 instead.",
            "entry": "pre-commit-hooks-removed pyflakes flake8 https://gitlab.com/pycqa/flake8",
            "language": "python",
            "always_run": true,
            "pass_filenames": false
        },
        {
            "id": "requirements-txt-fixer",
            "name": "Fix requirements.txt",
            "description": "Sorts entries in requirements.txt",
            "entry": "requirements-txt-fixer",
            "language": "python",
            "files": "requirements.*\\.txt$"
        },
        {
            "id": "sort-simple-yaml",
            "name": "Sort simple YAML files",
            "language": "python",
            "entry": "sort-simple-yaml",
            "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.",
            "files": "^$"
        },
        {
            "id": "trailing-whitespace",
            "name": "Trim Trailing Whitespace",
            "description": "This hook trims trailing whitespace.",
            "entry": "trailing-whitespace-fixer",
            "language": "python",
            "types": [
                "text"
            ],
            "stages": [
                "commit",
                "push",
                "manual"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-autopep8": [
        {
            "id": "autopep8",
            "name": "autopep8",
            "entry": "autopep8",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "-i"
            ],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-coffeelint": [
        {
            "id": "coffeelint",
            "name": "coffeelint",
            "entry": "coffeelint",
            "language": "node",
            "files": "\\.(js|coffee)$",
            "args": [],
            "additional_dependencies": [
                "coffeelint@2.1.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-csslint": [
        {
            "id": "csslint",
            "name": "csslint",
            "entry": "csslint",
            "language": "node",
            "files": "\\.css$",
            "args": [],
            "additional_dependencies": [
                "csslint@1.0.5"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-eslint": [
        {
            "id": "eslint",
            "name": "eslint",
            "entry": "eslint",
            "language": "node",
            "types": [
                "javascript"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [
                "eslint@7.0.0"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-fixmyjs": [
        {
            "id": "fixmyjs",
            "name": "fixmyjs",
            "entry": "fixmyjs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "fixmyjs@2.0.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/pre-commit/mirrors-isort": [
        {
            "id": "isort",
            "name": "isort",
            "entry": "isort",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-jshint": [
        {
            "id": "jshint",
            "name": "jshint",
            "entry": "jshint",
            "language": "node",
            "types": [
                "javascript"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": [
                "jshint@2.11.1"
            ]
        }
    ],
    "https://github.com/pre-commit/mirrors-mypy": [
        {
            "id": "mypy",
            "name": "mypy",
            "entry": "mypy",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "--ignore-missing-imports",
                "--scripts-are-modules"
            ],
            "require_serial": true,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-puppet-lint": [
        {
            "id": "puppet-lint",
            "name": "puppet-lint",
            "entry": "puppet-lint",
            "language": "ruby",
            "types": [
                "puppet"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-ruby-lint": [
        {
            "id": "ruby-lint",
            "name": "ruby-lint",
            "entry": "ruby-lint",
            "language": "ruby",
            "types": [
                "ruby"
            ],
            "args": [],
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-scss-lint": [
        {
            "id": "scss-lint",
            "name": "scss_lint",
            "entry": "scss-lint",
            "language": "ruby",
            "types": [
                "scss"
            ],
            "args": [],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/mirrors-yapf": [
        {
            "id": "yapf",
            "name": "yapf",
            "entry": "yapf",
            "language": "python",
            "types": [
                "python"
            ],
            "args": [
                "-i"
            ],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/pre-commit/pygrep-hooks": [
        {
            "id": "python-check-blanket-noqa",
            "name": "check blanket noqa",
            "description": "Enforce that `noqa` annotations always occur with specific codes",
            "entry": "(?i)# noqa(?!: )",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-check-mock-methods",
            "name": "check for not-real mock methods",
            "description": "Prevent common mistakes of `assert mck.not_called()`, `assert mck.called_once_with(...)` and `mck.assert_called`.",
            "language": "pygrep",
            "entry": "(?x)(\n    assert .*\\.(\n        not_called|\n        called_\n    )|\n    # ''.join(rf'(?<!\\b{s})' for s in dir(mock) if s.endswith('Mock')))\n    (?<!\\bAsyncMock)(?<!\\bMagicMock)(?<!\\bMock)(?<!\\bNonCallableMagicMock)(?<!\\bNonCallableMock)(?<!\\bPropertyMock)\n    \\.assert_(\n        any_call|\n        called|\n        called_once|\n        called_once_with|\n        called_with|\n        has_calls|\n        not_called\n    )($|[^(\\w])\n)\n",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-no-eval",
            "name": "check for eval()",
            "description": "A quick check for the `eval()` built-in function",
            "entry": "\\beval\\(",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-no-log-warn",
            "name": "use logger.warning(",
            "description": "A quick check for the deprecated `.warn()` method of python loggers",
            "entry": "(?<!warnings)\\.warn\\(",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "python-use-type-annotations",
            "name": "type annotations not comments",
            "description": "Enforce that python3.6+ type annotations are used instead of type comments",
            "entry": "# type(?!: *ignore([^a-zA-Z0-9]|$))",
            "language": "pygrep",
            "types": [
                "python"
            ]
        },
        {
            "id": "rst-backticks",
            "name": "rst ``code`` is two backticks",
            "description": "Detect common mistake of using single backticks when writing rst",
            "entry": "(^| )`[^`]+[^_]`([^_]|$)",
            "language": "pygrep",
            "types": [
                "rst"
            ]
        },
        {
            "id": "text-unicode-replacement-char",
            "name": "no unicode replacement chars",
            "description": "Forbid files which have a UTF-8 Unicode replacement character",
            "entry": "\ufffd",
            "language": "pygrep",
            "types": [
                "text"
            ]
        }
    ],
    "https://github.com/FalconSocial/pre-commit-mirrors-pep257": [
        {
            "id": "pep257",
            "name": "pep257",
            "entry": "pep257",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/FalconSocial/pre-commit-python-sorter": [
        {
            "id": "python-import-sorter",
            "name": "Sort python imports",
            "description": "This hook sorts python imports.",
            "entry": "python-import-sorter",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/guykisel/pre-commit-robotframework-tidy": [
        {
            "id": "robotframework-tidy-wrapper",
            "name": "robotframework tidy wrapper",
            "description": "Runs Robot Framework's tidy tool.",
            "entry": "python-robotframework-tidy",
            "language": "python",
            "files": "\\.robot$"
        }
    ],
    "https://github.com/guykisel/prospector-mirror": [
        {
            "id": "prospector",
            "name": "prospector",
            "description": "This hook runs Prospector: https://github.com/landscapeio/prospector",
            "entry": "prospector",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/asottile/add-trailing-comma": [
        {
            "id": "add-trailing-comma",
            "name": "Add trailing commas",
            "description": "Automatically add trailing commas to calls and literals.",
            "entry": "add-trailing-comma",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/pyupgrade": [
        {
            "id": "pyupgrade",
            "name": "pyupgrade",
            "description": "Automatically upgrade syntax for newer versions.",
            "entry": "pyupgrade",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/reorder_python_imports": [
        {
            "id": "reorder-python-imports",
            "name": "Reorder python imports",
            "description": "This hook reorders imports in python files.",
            "entry": "reorder-python-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "files": "",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/asottile/yesqa": [
        {
            "id": "yesqa",
            "name": "Strip unnecessary `# noqa`s",
            "description": "Automatically remove unnecessary `# noqa` comments",
            "entry": "yesqa",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/seed-isort-config": [
        {
            "id": "seed-isort-config",
            "name": "seed isort known_third_party",
            "description": "Statically populate the `known_third_party` `isort` setting.",
            "entry": "seed-isort-config",
            "language": "python",
            "always_run": true,
            "pass_filenames": false,
            "minimum_pre_commit_version": "0.14.0"
        }
    ],
    "https://github.com/asottile/blacken-docs": [
        {
            "id": "blacken-docs",
            "name": "blacken-docs",
            "description": "Run `black` on python code blocks in documentation files",
            "entry": "blacken-docs",
            "language": "python",
            "language_version": "python3",
            "files": "\\.(rst|md|markdown|py|tex)$"
        }
    ],
    "https://github.com/asottile/dead": [
        {
            "id": "dead",
            "name": "detect dead code",
            "description": "dead simple python dead code detection",
            "entry": "dead",
            "pass_filenames": false,
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/asottile/setup-cfg-fmt": [
        {
            "id": "setup-cfg-fmt",
            "name": "setup-cfg-fmt",
            "description": "apply a consistent format to `setup.cfg` files",
            "entry": "setup-cfg-fmt",
            "language": "python",
            "language_version": "python3",
            "files": "(^|/)setup\\.cfg$"
        }
    ],
    "https://github.com/asottile/cheetah_lint": [
        {
            "id": "cheetah-reorder-imports",
            "name": "Reorder cheetah imports",
            "description": "This hook reorders imports in cheetah files.",
            "entry": "cheetah-reorder-imports",
            "language": "python",
            "files": "\\.tmpl$"
        },
        {
            "id": "cheetah-flake",
            "name": "Cheetah flake",
            "description": "Lint cheetah code using flake8 and some other checks.",
            "entry": "cheetah-flake",
            "language": "python",
            "files": "\\.tmpl$"
        }
    ],
    "https://github.com/digitalpulp/pre-commit-php": [
        {
            "id": "php-lint-all",
            "name": "PHP Syntax Check (Comprehensive)",
            "description": "Check PHP Syntax on ALL PHP staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/php-lint.sh",
            "language": "script",
            "files": "\\.php$",
            "args": [
                "-s all"
            ]
        },
        {
            "id": "php-lint",
            "name": "PHP Syntax Check (Quick)",
            "description": "Runs php -l on all staged PHP files. Exits when it hits the first errored file",
            "entry": "php -l",
            "language": "system",
            "files": "\\.php$"
        },
        {
            "id": "php-unit",
            "name": "PHP Unit",
            "description": "Run the full php unit test. Checks which PHPUnit executable is available first and then runs it. Preference order is vendor/bin, phpunit and phpunit.phar.",
            "entry": "pre_commit_hooks/php-unit.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs",
            "name": "PHP Codesniffer",
            "description": "Run php codesniffer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cs.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cbf",
            "name": "PHP Codesniffer (Code Beutifier and Formatter)",
            "description": "Run php codesniffer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cbf.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-cs-fixer",
            "name": "PHP Coding Standards Fixer",
            "description": "Run php coding standards fixer against all staged PHP files.",
            "entry": "pre_commit_hooks/php-cs-fixer.sh",
            "language": "script",
            "files": "\\.php$"
        },
        {
            "id": "php-stan",
            "name": "PHPStan",
            "description": "Run PHPStan against all staged PHP files.",
            "entry": "pre_commit_hooks/php-stan.sh",
            "language": "script",
            "files": "\\.php$"
        }
    ],
    "https://github.com/elidupuis/mirrors-jscs": [
        {
            "id": "jscs",
            "name": "jscs",
            "entry": "jscs",
            "language": "node",
            "files": "\\.js$",
            "args": [],
            "additional_dependencies": [
                "jscs@3.0.7"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/elidupuis/mirrors-sass-lint": [
        {
            "id": "sass-lint",
            "name": "sass-lint",
            "entry": "sass-lint",
            "language": "node",
            "files": "\\.(scss|sass)$",
            "args": [],
            "additional_dependencies": [
                "sass-lint@1.12.0"
            ],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/jumanjihouse/pre-commit-hooks": [
        {
            "id": "bundler-audit",
            "name": "Patch-level verification for bundler",
            "description": "Check for vulnerable gem versions and insecure sources",
            "entry": "run-bundle-audit",
            "language": "ruby",
            "pass_filenames": false,
            "files": "Gemfile.lock",
            "args": [
                "--update"
            ]
        },
        {
            "id": "check-mailmap",
            "name": "Detect if an email address needs to be added to mailmap",
            "language": "script",
            "entry": "pre_commit_hooks/check-mailmap",
            "always_run": true,
            "exclude": ".*"
        },
        {
            "id": "fasterer",
            "name": "Suggest speed improvements in Ruby",
            "description": "Use fasterer to suggest speed improvements in Ruby",
            "entry": "run-fasterer",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "forbid-binary",
            "name": "Forbid binaries",
            "description": "Forbid binary files from being committed",
            "entry": "pre_commit_hooks/forbid-binary",
            "language": "script",
            "types": [
                "binary"
            ]
        },
        {
            "id": "forbid-space-in-indent",
            "name": "Forbid spaces in indentation",
            "description": "Forbid spaces in indentation",
            "entry": "pre_commit_hooks/forbid-space-in-indent",
            "language": "script"
        },
        {
            "id": "git-check",
            "name": "Check for conflict markers and core.whitespace errors",
            "description": "Use git to check for conflict markers and core.whitespace errors, respecting .gitattributes",
            "entry": "pre_commit_hooks/git-check",
            "language": "script"
        },
        {
            "id": "git-dirty",
            "name": "Check if the git tree is dirty",
            "description": "Detect if git tree contains modified, staged, or untracked files",
            "entry": "pre_commit_hooks/git-dirty",
            "language": "script"
        },
        {
            "id": "markdownlint",
            "name": "Check markdown files",
            "description": "Check markdown files and flag style issues",
            "entry": "run-mdl",
            "language": "ruby",
            "types": [
                "markdown"
            ]
        },
        {
            "id": "reek",
            "name": "Find ruby code smells",
            "description": "Use reek to find ruby code smells",
            "entry": "run-reek",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "require-ascii",
            "name": "Check file encoding",
            "description": "Ensure file is ascii-encoded",
            "entry": "require-ascii.py",
            "language": "python",
            "types": [
                "text"
            ]
        },
        {
            "id": "rubocop",
            "name": "Check Ruby style with rubocop and rubocop-rspec",
            "description": "Enforce Ruby style guide with rubocop and rubocop-rspec",
            "entry": "run-rubocop",
            "language": "ruby",
            "types": [
                "ruby"
            ]
        },
        {
            "id": "shellcheck",
            "name": "Test shell scripts with shellcheck",
            "description": "Shell scripts conform to shellcheck",
            "entry": "pre_commit_hooks/shellcheck",
            "language": "script",
            "types": [
                "shell"
            ],
            "args": [
                "-e",
                "SC1091"
            ],
            "additional_dependencies": [
                "shellcheck"
            ]
        },
        {
            "id": "script-must-have-extension",
            "name": "Non-executable shell script filename ends in .sh",
            "description": "Non-executable shell script filename ends in .sh",
            "entry": "pre_commit_hooks/script_must_have_extension",
            "language": "script",
            "types": [
                "shell",
                "non-executable"
            ]
        },
        {
            "id": "script-must-not-have-extension",
            "name": "Executable shell script omits the filename extension",
            "description": "Executable shell script omits the filename extension",
            "entry": "pre_commit_hooks/script_must_not_have_extension",
            "language": "script",
            "types": [
                "shell",
                "executable"
            ]
        },
        {
            "id": "shfmt",
            "name": "Check shell style with shfmt",
            "language": "script",
            "entry": "pre_commit_hooks/shfmt",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/jumanjihouse/pre-commit-hook-yamlfmt": [
        {
            "id": "yamlfmt",
            "name": "Format YAML files",
            "description": "Format YAML files",
            "entry": "yamlfmt",
            "language": "python",
            "types": [
                "yaml"
            ]
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks": [
        {
            "id": "forbid-crlf",
            "name": "CRLF end-lines checker",
            "description": "Forbid files containing CRLF end-lines to be committed",
            "entry": "forbid_crlf",
            "language": "python",
            "files": ""
        },
        {
            "id": "remove-crlf",
            "name": "CRLF end-lines remover",
            "description": "Replace CRLF end-lines by LF ones before committing",
            "entry": "remove_crlf",
            "language": "python",
            "files": ""
        },
        {
            "id": "forbid-tabs",
            "name": "No-tabs checker",
            "description": "Forbid files containing tabs to be committed",
            "entry": "forbid_tabs",
            "language": "python",
            "files": "",
            "exclude": "(Makefile|debian/rules)(\\.in)?$"
        },
        {
            "id": "remove-tabs",
            "name": "Tabs remover",
            "description": "Replace tabs by whitespaces before committing",
            "entry": "remove_tabs",
            "language": "python",
            "args": [
                "--whitespaces-count",
                "4"
            ],
            "files": "",
            "exclude": "(Makefile|debian/rules)(\\.in)?$"
        },
        {
            "id": "insert-license",
            "name": "Insert license in comments",
            "description": "Insert a short license disclaimer as a header comment in source files",
            "entry": "insert_license",
            "language": "python",
            "files": ".*/.*"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-go": [
        {
            "id": "checkmake",
            "name": "Makefile linter/analyzer",
            "entry": "checkmake",
            "language": "golang",
            "additional_dependencies": [
                "github.com/mrtazz/checkmake"
            ],
            "files": "Makefile"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-java": [
        {
            "id": "validate-html",
            "name": "HTML syntax validator using W3C v.Nu checker, with support for handlebars/jinja2 templates",
            "entry": "validate_html",
            "language": "python",
            "files": ".*\\.(html|hbs)$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-lxml": [
        {
            "id": "forbid-html-img-without-alt-text",
            "name": "HTML img tag alt text checker",
            "description": "List every <img> tag without a alt= or data-ng-attr-alt= attribute",
            "entry": "forbid_html_img_without_alt_text",
            "language": "python",
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "forbid-non-std-html-attributes",
            "name": "Non-standard HTML attributes checker",
            "description": "Detect any non-standard attribute that is not prefixed with data-",
            "entry": "forbid_non_std_html_attributes",
            "language": "python",
            "args": [
                "--extra-known-attributes",
                "content,http-equiv,placeholder,role,style"
            ],
            "files": ".*\\.(html|hbs)$"
        },
        {
            "id": "detect-missing-css-classes",
            "name": "Missing CSS classes checker",
            "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found",
            "entry": "detect_missing_css_classes",
            "language": "python",
            "files": ".*\\.(css|hbs|html)$"
        },
        {
            "id": "html-tags-blacklist",
            "name": "Forbid some HTML tags",
            "entry": "html_tags_blacklist",
            "language": "python",
            "args": [
                "--forbidden-tags",
                "basefont,blink,center,font,marquee,s,strike,tt,u"
            ],
            "files": "\\.(html|hbs)$"
        },
        {
            "id": "html-attributes-blacklist",
            "name": "Forbid some HTML attributes",
            "entry": "html_attributes_blacklist",
            "language": "python",
            "args": [
                "--forbidden-attributes",
                "align,alink,background,basefont,bgcolor,border,color,link,text,vlink"
            ],
            "files": "\\.(html|hbs)$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-markup": [
        {
            "id": "rst-linter",
            "name": "Check .rst files with the same linter used by pypi.org",
            "entry": "rst_linter",
            "language": "python",
            "files": "\\.rst$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-nodejs": [
        {
            "id": "htmlhint",
            "name": "NodeJS HTML syntax linter (htmlhint)",
            "entry": "htmlhint",
            "language": "node",
            "files": ".*\\.(html|hbs)$",
            "additional_dependencies": [
                "htmlhint"
            ]
        },
        {
            "id": "htmllint",
            "name": "NodeJS HTML syntax linter (htmllint)",
            "entry": "htmllint",
            "language": "node",
            "files": ".*\\.(html|hbs)$",
            "additional_dependencies": [
                "htmllint-cli"
            ]
        },
        {
            "id": "dockerfile_lint",
            "name": "Dockerfile linter",
            "entry": "dockerfile_lint",
            "args": [
                "--dockerfile"
            ],
            "language": "node",
            "additional_dependencies": [
                "dockerfile_lint"
            ],
            "files": "Dockerfile.*"
        },
        {
            "id": "markdown-toc",
            "name": "Insert a table of contents in Markdown files, like a README.md",
            "entry": "markdown-toc",
            "args": [
                "-i"
            ],
            "language": "node",
            "additional_dependencies": [
                "markdown-toc"
            ],
            "files": ".*\\.md$"
        }
    ],
    "https://github.com/Lucas-C/pre-commit-hooks-safety": [
        {
            "id": "python-safety-dependencies-check",
            "name": "safety",
            "description": "Analyze your Python requirements for known security vulnerabilities",
            "entry": "safety_check",
            "language": "python",
            "files": "requirements"
        }
    ],
    "https://github.com/chriskuehl/puppet-pre-commit-hooks": [
        {
            "id": "epp-validate",
            "additional_dependencies": [
                "puppet"
            ],
            "description": "Validate syntax of Puppet EPP templates",
            "entry": "epp-validate",
            "files": "\\.epp$",
            "language": "ruby",
            "name": "Validate EPP templates"
        },
        {
            "id": "erb-validate",
            "description": "Validate syntax of Ruby ERB templates",
            "entry": "erb-validate",
            "files": "\\.erb$",
            "language": "ruby",
            "name": "Validate ERB templates"
        },
        {
            "id": "g10k-validate",
            "description": "Validate syntax of Puppetfile using g10k",
            "entry": "g10k-validate",
            "files": "^Puppetfile$",
            "language": "ruby",
            "name": "Validate g10k Puppetfile"
        },
        {
            "id": "puppet-lint",
            "additional_dependencies": [
                "puppet-lint"
            ],
            "description": "Check Puppet manifests for stylistic problems",
            "entry": "puppet-lint",
            "files": "\\.pp$",
            "language": "ruby",
            "name": "puppet-lint"
        },
        {
            "id": "puppet-validate",
            "additional_dependencies": [
                "puppet"
            ],
            "description": "Validate syntax of Puppet manifests",
            "entry": "puppet-validate",
            "files": "\\.pp$",
            "language": "ruby",
            "name": "Validate Puppet manifests"
        },
        {
            "id": "r10k-validate",
            "additional_dependencies": [
                "r10k"
            ],
            "description": "Validate syntax of Puppetfile using r10k",
            "entry": "r10k-validate",
            "files": "^Puppetfile$",
            "language": "ruby",
            "name": "Validate r10k Puppetfile"
        },
        {
            "id": "ruby-validate",
            "additional_dependencies": [
                "ruby"
            ],
            "description": "Validate syntax of ruby code",
            "entry": "ruby-validate",
            "files": "\\.rb$",
            "language": "ruby",
            "name": "Validate ruby syntax"
        }
    ],
    "https://github.com/golangci/golangci-lint": [
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "description": "Fast linters runner for Go.",
            "entry": "golangci-lint run --fix",
            "types": [
                "go"
            ],
            "language": "golang",
            "pass_filenames": false
        }
    ],
    "https://github.com/Bahjat/pre-commit-golang": [
        {
            "id": "go-fmt-import",
            "name": "go import/fmt",
            "entry": "run-go-fmt-import.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimport,gofmt`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "golint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go lint`, requires golang"
        },
        {
            "id": "go-unit-tests",
            "name": "go unit test",
            "entry": "run-go-unit-tests.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go test`, requires golang"
        },
        {
            "id": "gofumpt",
            "name": "gofumpt",
            "entry": "run-go-gofumpt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofumpt`, requires github.com/mvdan/gofumpt"
        },
        {
            "id": "go-err-check",
            "name": "go errcheck",
            "entry": "run-go-err-check.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `errcheck`, requires github.com/kisielk/errcheck"
        },
        {
            "id": "go-static-check",
            "name": "go staticcheck",
            "entry": "run-go-static-check.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `staticcheck`, install https://staticcheck.io/docs/"
        },
        {
            "id": "golangci-lint",
            "name": "go golangci-lint",
            "entry": "run-golangci-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint`, install https://github.com/golangci/golangci-lint"
        }
    ],
    "https://github.com/dnephin/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-go-imports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimports`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "go-cyclo",
            "name": "go-cyclo",
            "entry": "run-go-cyclo.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo",
            "args": [
                "-over=15"
            ]
        },
        {
            "id": "validate-toml",
            "name": "validate toml",
            "entry": "tomlv",
            "files": "\\.toml$",
            "language": "system",
            "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"
        },
        {
            "id": "no-go-testing",
            "name": "Check files aren't using go's testing package",
            "entry": "testing\\.T",
            "files": "test_.*\\.go$",
            "language": "pygrep",
            "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"
        },
        {
            "id": "gometalinter",
            "name": "gometalinter",
            "entry": "run-gometalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": ""
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "run-golangci-lint.sh",
            "types": [
                "go"
            ],
            "language": "script",
            "pass_filenames": false,
            "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "run-go-critic.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"
        },
        {
            "id": "go-unit-tests",
            "name": "go-unit-tests",
            "entry": "run-go-unit-tests.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go test`"
        },
        {
            "id": "go-build",
            "name": "go-build",
            "entry": "run-go-build.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go build`, requires golang"
        }
    ],
    "https://github.com/troian/pre-commit-golang": [
        {
            "id": "go-fmt",
            "name": "go fmt",
            "entry": "run-go-fmt.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gofmt`, requires golang"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-goimports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `goimports`, requires golang"
        },
        {
            "id": "go-vet",
            "name": "go vet",
            "entry": "run-go-vet.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go vet`, requires golang"
        },
        {
            "id": "go-lint",
            "name": "go lint",
            "entry": "run-go-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golint`, requires https://github.com/golang/lint"
        },
        {
            "id": "go-metalinter",
            "name": "go metalinter",
            "entry": "run-go-metalinter.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `gometalinter`, requires https://github.com/alecthomas/gometalinter"
        },
        {
            "id": "go-build",
            "name": "go build",
            "description": "Makes sure Go code can build",
            "entry": "run-go-build.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-build-plugin",
            "name": "go build plugin",
            "description": "Makes sure Go code can build package as plugin",
            "entry": "run-go-build-plugin.sh",
            "language": "script",
            "files": "\\.go$"
        }
    ],
    "https://github.com/jstewmon/check-swagger": [
        {
            "id": "check-swagger",
            "name": "check-swagger",
            "entry": "check-swagger",
            "description": "Hook to validate swagger specs.",
            "language": "python",
            "files": ".*swagger.*\\.(json|yaml|yml)"
        }
    ],
    "https://github.com/detailyang/pre-commit-shell": [
        {
            "id": "shell-lint",
            "name": "Shell Syntax Check",
            "description": "Check Shell Syntax on ALL staged files with user friendly messages and colors",
            "entry": "pre_commit_hooks/shell-lint.sh",
            "language": "script",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/bemeurer/beautysh": [
        {
            "id": "beautysh",
            "name": "beautysh",
            "description": "A Bash beautifier for the masses.\nhttps://pypi.python.org/pypi/beautysh\n",
            "entry": "beautysh",
            "language": "python",
            "types": [
                "shell"
            ]
        }
    ],
    "https://github.com/antonbabenko/pre-commit-terraform": [
        {
            "id": "terraform_fmt",
            "name": "Terraform fmt",
            "description": "Rewrites all Terraform configuration files to a canonical format.",
            "entry": "terraform_fmt.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_docs",
            "name": "Terraform docs",
            "description": "Inserts input and output documentation into README.md (using terraform-docs).",
            "require_serial": true,
            "entry": "terraform_docs.sh",
            "args": [
                "--args=--with-aggregate-type-defaults"
            ],
            "language": "script",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_docs_without_aggregate_type_defaults",
            "name": "Terraform docs (without aggregate type defaults)",
            "description": "Inserts input and output documentation into README.md (using terraform-docs).",
            "require_serial": true,
            "entry": "terraform_docs.sh",
            "language": "script",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_docs_replace",
            "name": "Terraform docs (overwrite README.md)",
            "description": "Overwrite content of README.md with terraform-docs.",
            "require_serial": true,
            "entry": "terraform_docs_replace",
            "language": "python",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_validate",
            "name": "Terraform validate",
            "description": "Validates all Terraform configuration files.",
            "entry": "terraform_validate.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_tflint",
            "name": "Terraform validate with tflint",
            "description": "Validates all Terraform configuration files with TFLint.",
            "entry": "terraform_tflint.sh",
            "language": "script",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terragrunt_fmt",
            "name": "Terragrunt fmt",
            "description": "Rewrites all Terragrunt configuration files to a canonical format.",
            "entry": "terragrunt_fmt.sh",
            "language": "script",
            "files": "(\\.hcl)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_tfsec",
            "name": "Terraform validate with tfsec",
            "description": "Static analysis of Terraform templates to spot potential security issues.",
            "entry": "terraform_tfsec.sh",
            "language": "script"
        }
    ],
    "https://github.com/ansible/ansible-lint": [
        {
            "id": "ansible-lint",
            "name": "Ansible-lint",
            "description": "This hook runs ansible-lint.",
            "entry": "ansible-lint --force-color .",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/doublify/pre-commit-clang-format": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Format files with ClangFormat.",
            "entry": "clang-format -i",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|frag|glsl|h|hpp|hxx|ih|ispc|ipp|java|js|m|mm|proto|textproto|vert)$",
            "args": [
                "-fallback-style=none"
            ]
        }
    ],
    "https://github.com/doublify/pre-commit-go": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with go fmt.",
            "entry": "fmt.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "vet",
            "name": "vet",
            "description": "Check files with go vet.",
            "entry": "vet.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "fix",
            "name": "fix",
            "description": "Fix files with go fix.",
            "entry": "go fix",
            "language": "system",
            "files": "\\.go$"
        }
    ],
    "https://github.com/doublify/pre-commit-hindent": [
        {
            "id": "hindent",
            "name": "hindent",
            "description": "Format files with hindent.",
            "entry": "hindent.sh",
            "language": "script",
            "files": "\\.(hs|lhs)$"
        }
    ],
    "https://github.com/doublify/pre-commit-isort": [
        {
            "id": "isort",
            "name": "isort",
            "description": "Sort imports alphabetically with isort.",
            "entry": "isort",
            "language": "python",
            "files": "\\.py$"
        }
    ],
    "https://github.com/doublify/pre-commit-rust": [
        {
            "id": "fmt",
            "name": "fmt",
            "description": "Format files with cargo fmt.",
            "entry": "cargo fmt --",
            "language": "system",
            "types": [
                "rust"
            ],
            "args": []
        },
        {
            "id": "cargo-check",
            "name": "cargo check",
            "description": "Check the package for errors.",
            "entry": "cargo check",
            "language": "system",
            "types": [
                "rust"
            ],
            "pass_filenames": false
        },
        {
            "id": "clippy",
            "name": "clippy",
            "description": "Lint rust sources",
            "entry": "cargo clippy -- -D warnings",
            "language": "system",
            "types": [
                "rust"
            ],
            "pass_filenames": false
        }
    ],
    "https://github.com/kintoandar/pre-commit": [
        {
            "id": "terraform_fmt",
            "name": "terraform_fmt",
            "description": "Formats terraform scripts into the correct checkstyle",
            "entry": "bin/tf_fmt.sh",
            "language": "script",
            "files": "\\.tf$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "terraform_validate",
            "name": "terraform_validate",
            "description": "Validates terraform scripts syntax",
            "entry": "bin/tf_validate.sh",
            "language": "script",
            "files": "\\.tf$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "prometheus_check_rules",
            "name": "prometheus_check_rules",
            "description": "Validates prometheus rules",
            "entry": "bin/prom_rules.sh",
            "language": "script",
            "files": "\\.rules$"
        },
        {
            "id": "prometheus_check_config",
            "name": "prometheus_check_config",
            "description": "Validates prometheus configuration",
            "entry": "bin/prom_config.sh",
            "language": "script",
            "files": "prometheus.yml$"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-stylelint": [
        {
            "id": "stylelint",
            "name": "stylelint",
            "entry": "stylelint",
            "language": "node",
            "files": "\\.(css|scss|sass)$",
            "args": [],
            "minimum_pre_commit_version": "0.7.0"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-tslint": [
        {
            "id": "tslint",
            "name": "tslint",
            "entry": "tslint",
            "language": "node",
            "files": "\\.(ts)$",
            "args": [],
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/awebdeveloper/pre-commit-prettier": [
        {
            "id": "prettier",
            "name": "prettier",
            "entry": "prettier",
            "language": "node",
            "files": "\\.(js)$",
            "args": [
                "--write"
            ],
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/prettier/prettier": [
        {
            "id": "prettier",
            "name": "prettier",
            "entry": "prettier --write",
            "language": "node",
            "files": "\\.(css|less|scss|graphql|gql|html|js|jsx|json|md|markdown|mdown|mkdn|mdx|ts|tsx|vue|yaml|yml)$"
        }
    ],
    "https://github.com/adrienverge/yamllint": [
        {
            "id": "yamllint",
            "name": "yamllint",
            "description": "This hook runs yamllint.",
            "entry": "yamllint",
            "language": "python",
            "types": [
                "file",
                "yaml"
            ]
        }
    ],
    "https://github.com/thlorenz/doctoc": [
        {
            "id": "doctoc",
            "name": "doctoc",
            "language": "node",
            "entry": "doctoc",
            "types": [
                "markdown"
            ]
        }
    ],
    "https://github.com/noahsark769/xcodeproj-sort-pre-commit-hook": [
        {
            "id": "xcodeproj-sort",
            "name": "Sort the xcode project file",
            "description": "This hook sorts your .xcodeproj file",
            "entry": "xcodeproj-sort",
            "language": "ruby",
            "files": ".*\\.pbxproj"
        }
    ],
    "https://github.com/jorisroovers/gitlint": [
        {
            "id": "gitlint",
            "name": "gitlint",
            "language": "python",
            "entry": "gitlint --staged --msg-filename",
            "stages": [
                "commit-msg"
            ]
        }
    ],
    "https://github.com/psf/black": [
        {
            "id": "black",
            "name": "black",
            "description": "Black: The uncompromising Python code formatter",
            "entry": "black",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/IamTheFij/ansible-pre-commit": [
        {
            "id": "encryption-check",
            "name": "Ansible Vault Encryption Check",
            "description": "Checks that vault files are encrypted",
            "entry": "encryption-check.sh",
            "files": "((^|/)vault|vault.y[a]{0,1}ml$|.vault$)",
            "language": "script"
        }
    ],
    "https://github.com/IamTheFij/docker-pre-commit": [
        {
            "id": "docker-compose-check",
            "name": "Validate docker-compose files",
            "description": "Checks that vault files are encrypted",
            "entry": "compose-check.sh",
            "files": "docker-compose.y[a]{0,1}ml$",
            "language": "script"
        }
    ],
    "https://github.com/mattlqx/pre-commit-ruby": [
        {
            "id": "rubocop",
            "name": "Check Ruby style with rubocop",
            "description": "Enforce Ruby style guide with rubocop",
            "entry": "bin/rubocop-wrapper.sh",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "verbose": true
        },
        {
            "id": "rspec",
            "name": "Unit test Ruby code with rspec",
            "description": "Run rspec in changed paths with spec directories",
            "entry": "bin/rspec-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "verbose": true
        },
        {
            "id": "foodcritic",
            "name": "Enforce Chef style guide with foodcritic",
            "description": "Enforce Chef style guide with foodcritic",
            "entry": "bin/foodcritic-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "file"
            ],
            "files": "(?x)^(\n    .*/(recipes|attributes|resources|providers)/.*\\.rb|\n    .*/metadata\\.rb\n)$\n",
            "exclude": ".*/test/.*\\.rb$",
            "verbose": true
        },
        {
            "id": "cookstyle",
            "name": "Enforce Chef style guide with cookstyle",
            "description": "Enforce Chef style guide with cookstyle",
            "entry": "bin/cookstyle-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "verbose": true,
            "require_serial": true
        },
        {
            "id": "chef-cookbook-version",
            "name": "Ensure Chef cookbook version bump",
            "description": "Ensure Chef cookbook versions are bumped when contents are changed",
            "entry": "bin/cookbook-wrapper.rb",
            "language": "script",
            "pass_filenames": true,
            "types": [
                "file"
            ],
            "verbose": true
        }
    ],
    "https://github.com/mattlqx/pre-commit-sign": [
        {
            "id": "sign-commit",
            "name": "Sign commit",
            "description": "Hashes some fields of the commit and adds a signature for verification by other systems",
            "entry": "sign-commit",
            "language": "ruby",
            "pass_filenames": true,
            "minimum_pre_commit_version": "0.15.4",
            "stages": [
                "commit-msg"
            ]
        }
    ],
    "https://github.com/mattlqx/pre-commit-search-and-replace": [
        {
            "id": "search-and-replace",
            "name": "Search and replace strings",
            "description": "Search and replace strings",
            "entry": "bin/search-and-replace.rb",
            "language": "script",
            "pass_filenames": true,
            "exclude_types": [
                "binary"
            ]
        }
    ],
    "https://github.com/openstack-dev/bashate": [
        {
            "id": "bashate",
            "name": "bashate",
            "description": "This hook runs bashate for linting shell scripts",
            "entry": "bashate",
            "language": "python",
            "types": [
                "shell"
            ],
            "verbose": true
        }
    ],
    "https://github.com/pryorda/dockerfilelint-precommit-hooks": [
        {
            "id": "dockerfilelint",
            "name": "Dockerfile linter",
            "entry": "dockerfilelint",
            "language": "node",
            "additional_dependencies": [
                "dockerfilelint"
            ],
            "files": "Dockerfile.*"
        }
    ],
    "https://github.com/alessandrojcm/commitlint-pre-commit-hook": [
        {
            "id": "commitlint",
            "name": "commitlint",
            "description": "Commitlint hook",
            "language": "node",
            "entry": "commitlint --edit",
            "verbose": true
        }
    ],
    "https://github.com/henryykt/pre-commit-perl": [
        {
            "id": "perlcritic",
            "name": "perlcritic",
            "entry": "run-perlcritic.sh",
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perlcritic`, requires script in PATH"
        },
        {
            "id": "perltidy",
            "name": "perltidy",
            "entry": "run-perltidy.sh",
            "files": "\\.(pl|pm|t|PL)$",
            "language": "script",
            "description": "Runs `perltidy`, requires script in PATH"
        }
    ],
    "https://github.com/juancarlospaco/pre-commit-nim": [
        {
            "id": "nimble-check",
            "name": "nimble check",
            "entry": "nimble check .",
            "pass_filenames": false,
            "language": "system",
            "files": "\\.nim$"
        },
        {
            "id": "nim-check",
            "name": "nim check",
            "entry": "bash -xc 'echo \"$@\" | xargs --verbose -n1 nim check' --",
            "language": "system",
            "files": "\\.nim$"
        }
    ],
    "https://github.com/awslabs/cfn-python-lint": [
        {
            "id": "cfn-python-lint",
            "name": "AWS CloudFormation Linter",
            "entry": "cfn-lint",
            "language": "python",
            "files": "\\.(json|yaml|yml)$"
        }
    ],
    "https://github.com/thoughtworks/talisman": [
        {
            "id": "talisman-commit",
            "name": "talisman",
            "entry": "talisman --githook pre-commit",
            "stages": [
                "commit"
            ],
            "pass_filenames": false,
            "types": [
                "text"
            ],
            "language": "golang"
        },
        {
            "id": "talisman-push",
            "name": "talisman",
            "entry": "talisman --githook pre-push",
            "stages": [
                "push"
            ],
            "pass_filenames": false,
            "types": [
                "text"
            ],
            "language": "golang"
        }
    ],
    "https://gitlab.com/PyCQA/flake8": [
        {
            "id": "flake8",
            "name": "flake8",
            "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.",
            "entry": "flake8",
            "language": "python",
            "types": [
                "python"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/PyCQA/bandit": [
        {
            "id": "bandit",
            "name": "bandit",
            "description": "Bandit is a tool for finding common security issues in Python code",
            "entry": "bandit",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/PyCQA/pydocstyle": [
        {
            "id": "pydocstyle",
            "name": "pydocstyle",
            "description": "pydocstyle is a static analysis tool for checking compliance with Python docstring conventions.",
            "entry": "pydocstyle",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/PyCQA/pylint": [
        {
            "id": "pylint",
            "name": "pylint",
            "entry": "pylint",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/miki725/importanize": [
        {
            "id": "importanize",
            "name": "importanize",
            "description": "Organize python imports",
            "entry": "importanize",
            "language": "python",
            "language_version": "python3",
            "types": [
                "python"
            ],
            "args": [
                "-v",
                "--no-auto-pipe"
            ]
        }
    ],
    "https://github.com/motet-a/jinjalint": [
        {
            "id": "jinjalint",
            "name": "jinjalint",
            "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates.",
            "language": "python",
            "language_version": "python3",
            "entry": "jinjalint",
            "types": [
                "jinja"
            ]
        }
    ],
    "https://github.com/milin/giticket": [
        {
            "id": "giticket",
            "name": "giticket",
            "entry": "giticket",
            "language": "python",
            "stages": [
                "commit-msg"
            ],
            "description": "Utility to prepend your commits with info from your branch."
        }
    ],
    "https://github.com/sqlalchemyorg/zimports": [
        {
            "id": "zimports",
            "name": "zimports",
            "description": "Python import rewriter",
            "entry": "zimports",
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/peterdemin/pip-compile-multi": [
        {
            "id": "pip-compile-multi-verify",
            "name": "pip-compile-multi verify",
            "language": "python",
            "entry": "pip-compile-multi verify",
            "files": "^requirements/",
            "pass_filenames": false,
            "require_serial": true,
            "types": [
                "file",
                "non-executable",
                "text"
            ]
        }
    ],
    "https://github.com/homebysix/pre-commit-macadmin": [
        {
            "id": "check-autopkg-recipe-list",
            "name": "Check AutoPkg Recipe List",
            "description": "This hook checks AutoPkg recipe lists (in txt, plist, yaml, or json format) for common issues.",
            "entry": "check-autopkg-recipe-list",
            "language": "python",
            "files": "recipe.?list\\.(plist|yaml|yml|json|txt)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-autopkg-recipes",
            "name": "Check AutoPkg Recipes",
            "description": "This hook checks AutoPkg recipes to ensure they contain required top-level keys.",
            "entry": "check-autopkg-recipes",
            "language": "python",
            "files": "\\.recipe$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-git-config-email",
            "name": "Check Git Config Email",
            "description": "This hook checks to ensure the Git config email matches one of the specified domains.",
            "entry": "check-git-config-email",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        },
        {
            "id": "check-jamf-extension-attributes",
            "name": "Check Jamf EAs",
            "description": "This hook checks Jamf extension attributes for common issues.",
            "entry": "check-jamf-extension-attributes",
            "language": "python",
            "files": "(jamf|jss)/extension.?attributes/.*\\.(sh|bash|py|rb|js|pl)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-jamf-scripts",
            "name": "Check Jamf Scripts",
            "description": "This hook checks Jamf scripts for common issues.",
            "entry": "check-jamf-scripts",
            "language": "python",
            "files": "(jamf|jss)/scripts/.*\\.(sh|bash|py|rb|js|pl)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-jamf-profiles",
            "name": "Check Jamf Profiles",
            "description": "This hook checks Jamf profiles for common issues.",
            "entry": "check-jamf-profiles",
            "language": "python",
            "files": "(jamf|jss)/profiles/.*\\.(mobileconfig|plist)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munki-pkgsinfo",
            "name": "Check Munki Pkginfo Files",
            "description": "This hook checks Munki pkginfo files to ensure they are valid.",
            "entry": "check-munki-pkgsinfo",
            "language": "python",
            "files": "^pkgsinfo/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munkiadmin-scripts",
            "name": "Check MunkiAdmin Scripts",
            "description": "This hook ensures MunkiAdmin scripts are executable.",
            "entry": "check-munkiadmin-scripts",
            "language": "python",
            "files": "^MunkiAdmin/scripts/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-munkipkg-buildinfo",
            "name": "Check MunkiPkg Build-Info Files",
            "description": "This hook checks MunkiPkg build-info files to ensure they are valid.",
            "entry": "check-munkipkg-buildinfo",
            "language": "python",
            "files": "build-info\\.(plist|yml|yaml|json)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-outset-scripts",
            "name": "Check Outset Scripts",
            "description": "This hook checks Outset scripts to ensure they're executable.",
            "entry": "check-outset-scripts",
            "language": "python",
            "files": "usr/local/outset/(boot-once|boot-every|login-once|login-every|login-privileged-once|login-privileged-every|on-demand)/",
            "types": [
                "text"
            ]
        },
        {
            "id": "check-plists",
            "name": "Check Plists",
            "description": "This hook checks XML property list (plist) files for basic syntax errors.",
            "entry": "check-plists",
            "language": "python",
            "files": "\\.(plist|recipe|mobileconfig|pkginfo)$",
            "types": [
                "text"
            ]
        },
        {
            "id": "forbid-autopkg-overrides",
            "name": "Forbid AutoPkg Overrides",
            "description": "This hook prevents AutoPkg overrides from being added to the repo.",
            "entry": "forbid-autopkg-overrides",
            "language": "python",
            "files": "\\.recipe$",
            "types": [
                "text"
            ]
        },
        {
            "id": "forbid-autopkg-trust-info",
            "name": "Forbid AutoPkg Trust Info",
            "description": "This hook prevents AutoPkg recipes with trust info from being added to the repo.",
            "entry": "forbid-autopkg-trust-info",
            "language": "python",
            "files": "\\.recipe$",
            "types": [
                "text"
            ]
        },
        {
            "id": "munki-makecatalogs",
            "name": "Run Munki Makecatalogs",
            "description": "This hook runs the \"makecatalogs\" command to ensure all referenced packages are present and catalogs are up to date.",
            "entry": "munki-makecatalogs",
            "language": "python",
            "pass_filenames": false,
            "always_run": true
        }
    ],
    "https://github.com/fortman/pre-commit-prometheus": [
        {
            "id": "check-config",
            "stages": [
                "commit"
            ],
            "name": "Check prometheus config files",
            "description": "Check prometheus config files",
            "language": "docker_image",
            "entry": "--entrypoint /bin/promtool prom/prometheus:latest",
            "files": "^$",
            "args": [
                "check",
                "config"
            ]
        },
        {
            "id": "check-rules",
            "stages": [
                "commit"
            ],
            "name": "Check prometheus rule files",
            "description": "Check prometheus rule files",
            "language": "docker_image",
            "entry": "--entrypoint /bin/promtool prom/prometheus:latest",
            "files": "^$",
            "args": [
                "check",
                "rules"
            ]
        }
    ],
    "https://github.com/syntaqx/git-hooks": [
        {
            "id": "circleci-config-validate",
            "name": "CircleCI config validation",
            "description": "Test if the CircleCI config is well formed.",
            "entry": "hooks/circleci-config-validate.sh",
            "language": "script",
            "files": "^.circleci/config.yml$"
        },
        {
            "id": "go-fmt",
            "name": "go fmt",
            "description": "Runs `go fmt` and asserts no changes are needed.",
            "entry": "hooks/go-fmt.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-test",
            "name": "go test",
            "description": "Runs `go test` and asserts no tests are failing.",
            "entry": "hooks/go-test.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-mod-tidy",
            "name": "go mod tidy",
            "description": "Runs `go mod tidy` to ensure `go.mod` matches the project source.",
            "entry": "hooks/go-mod-tidy.sh",
            "language": "script",
            "files": "\\.go$"
        },
        {
            "id": "go-generate",
            "name": "go generate",
            "description": "Runs `go generate` against the projects go files.",
            "entry": "hooks/go-generate.sh",
            "language": "script",
            "files": "\\.go$",
            "always_run": true
        },
        {
            "id": "forbid-binary",
            "name": "Forbid binaries",
            "description": "Forbid binary files from being committed",
            "entry": "hooks/forbid-binary.sh",
            "language": "script",
            "types": [
                "binary"
            ]
        },
        {
            "id": "shellcheck",
            "name": "Test shell scripts with shellcheck",
            "description": "Shell scripts conform to shellcheck",
            "entry": "hooks/shellcheck.sh",
            "language": "script",
            "types": [
                "shell"
            ],
            "args": [
                "-e",
                "SC1091"
            ],
            "additional_dependencies": [
                "shellcheck"
            ]
        },
        {
            "id": "shfmt",
            "name": "Check shell style with shfmt",
            "language": "script",
            "entry": "hooks/shfmt.sh",
            "types": [
                "shell"
            ],
            "args": [
                "-l",
                "-i",
                "2",
                "-ci"
            ],
            "additional_dependencies": [
                "shfmt"
            ]
        }
    ],
    "https://github.com/Calinou/pre-commit-luacheck": [
        {
            "id": "luacheck",
            "name": "Luacheck",
            "description": "Lints Lua files using Luacheck.",
            "entry": "luacheck --",
            "language": "system",
            "types": [
                "file",
                "lua"
            ]
        }
    ],
    "https://github.com/belminf/pre-commit-chef": [
        {
            "id": "cookstyle",
            "name": "Chef-specific Rubocop linting with Cookstyle",
            "entry": "run_cookstyle.rb",
            "language": "ruby",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "files": ".*",
            "args": [
                "-a",
                "-D",
                "-S"
            ],
            "require_serial": true
        },
        {
            "id": "foodcritic",
            "name": "Chef cookbook linting with Foodcritic",
            "entry": "run_foodcritic.rb",
            "language": "ruby",
            "pass_filenames": true,
            "types": [
                "ruby"
            ],
            "files": "(?x)^(\n    (.*/)?(recipes|attributes|resources|providers)/.*\\.rb|\n    (.*/)?metadata\\.rb\n)$\n",
            "exclude": ".*/test/.*\\.rb$",
            "require_serial": true
        }
    ],
    "https://github.com/timothycrosley/isort": [
        {
            "id": "isort",
            "name": "isort",
            "entry": "isort",
            "require_serial": true,
            "language": "python",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/pocc/pre-commit-hooks": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "entry": "clang-format-hook",
            "description": "Formats C/CPP code",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|m)$",
            "language": "python"
        },
        {
            "id": "clang-tidy",
            "name": "clang-tidy",
            "entry": "clang-tidy-hook",
            "description": "Find warnings/errors in C/CPP code",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|m)$",
            "language": "python"
        },
        {
            "id": "oclint",
            "name": "oclint",
            "entry": "oclint-hook",
            "description": "Find warnings/errors in C/CPP code",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|m)$",
            "language": "python"
        },
        {
            "id": "uncrustify",
            "name": "uncrustify",
            "entry": "uncrustify-hook",
            "description": "Formats C/CPP code",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|m)$",
            "language": "python"
        },
        {
            "id": "cppcheck",
            "name": "cppcheck",
            "entry": "cppcheck-hook",
            "description": "Find warnings/errors in C/CPP code",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx|m)$",
            "language": "python"
        }
    ],
    "https://github.com/dwightgunning/pre-commit-nglint": [
        {
            "id": "nglint",
            "name": "nglint",
            "description": "Runs ng lint",
            "entry": "nglint.py",
            "language": "script",
            "minimum_pre_commit_version": "0.12.0"
        }
    ],
    "https://github.com/codespell-project/codespell": [
        {
            "id": "codespell",
            "name": "codespell",
            "description": "Checks for common misspellings in text files.",
            "entry": "codespell",
            "language": "python",
            "types": [
                "text"
            ]
        }
    ],
    "https://gitlab.com/smop/pre-commit-hooks": [
        {
            "id": "check-poetry",
            "name": "Poetry check",
            "description": "Validates the structure of the pyproject.toml file",
            "entry": "poetry check",
            "language": "system",
            "pass_filenames": false,
            "files": "pyproject.toml"
        },
        {
            "id": "check-gitlab-ci",
            "name": "GitLab CI/CD configuration check",
            "description": "Validates .gitlab-ci.yml file",
            "entry": "pre_commit_hooks/check-gitlab-ci",
            "language": "script",
            "pass_filenames": false,
            "files": ".gitlab-ci.yml"
        }
    ],
    "https://github.com/seddonym/import-linter": [
        {
            "id": "import-linter",
            "name": "import-linter",
            "description": "Import Linter allows you to define and enforce rules for the internal and external imports within your Python project.",
            "entry": "lint-imports",
            "language": "python",
            "types": [
                "python"
            ],
            "pass_filenames": false
        }
    ],
    "https://github.com/marco-c/taskcluster_yml_validator": [
        {
            "id": "taskcluster_yml",
            "name": "taskcluster_yml",
            "description": "Checks for validity of .taskcluster.yml file.",
            "entry": "taskcluster_yml_validator",
            "language": "python",
            "files": "^\\.taskcluster\\.yml$",
            "args": [],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/myint/docformatter": [
        {
            "id": "docformatter",
            "name": "docformatter",
            "description": "Formats docstrings to follow PEP 257.",
            "entry": "docformatter",
            "args": [
                "-i"
            ],
            "language": "python",
            "types": [
                "python"
            ]
        },
        {
            "id": "docformatter-venv",
            "name": "docformatter-venv",
            "description": "Formats docstrings to follow PEP 257. Uses python3 -m venv.",
            "entry": "docformatter",
            "args": [
                "-i"
            ],
            "language": "python_venv",
            "types": [
                "python"
            ]
        }
    ],
    "https://github.com/lorenzwalthert/precommit": [
        {
            "id": "roxygenize",
            "name": "roxygenize",
            "description": "run roxygen2::roxygenize()",
            "entry": "inst/bin/roxygenize",
            "language": "script",
            "files": "^(R|man)/"
        },
        {
            "id": "use-tidy-description",
            "name": "use-tidy-description",
            "description": "run usethis::use_tidy_description()",
            "entry": "inst/bin/use-tidy-description",
            "language": "script",
            "files": "^DESCRIPTION$"
        },
        {
            "id": "style-files",
            "name": "style-files",
            "description": "style files with styler",
            "entry": "inst/bin/style-files",
            "language": "script",
            "files": "(\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$"
        },
        {
            "id": "no-browser-statement",
            "name": "no-browser-statement",
            "description": "check if a .R file contains a `browser()` statement",
            "entry": "inst/bin/no-browser-statement",
            "language": "script",
            "files": "\\.[rR]$"
        },
        {
            "id": "parsable-R",
            "name": "parsable-R",
            "description": "check if a .R file is parsable",
            "entry": "inst/bin/parsable-R",
            "language": "script",
            "files": "\\.[rR]$"
        },
        {
            "id": "readme-rmd-rendered",
            "name": "readme-rmd-rendered",
            "description": "make sure README.Rmd hasn't been edited more recently than README.md",
            "entry": "inst/bin/readme-rmd-rendered",
            "language": "script",
            "files": "README\\.[Rr]?md$"
        },
        {
            "id": "codemeta-description-updated",
            "name": "codemeta-description-updated",
            "description": "make sure codemeta.json is in sync with DESCRIPTION. It should be run after use-tidy-description.",
            "entry": "inst/bin/codemeta-description-updated",
            "language": "script",
            "files": "^DESCRIPTION$"
        },
        {
            "id": "spell-check",
            "name": "spell-check",
            "description": "perform a spell check with spelling::spell_check_files()",
            "entry": "inst/bin/spell-check",
            "language": "script",
            "exclude": "(?x)^( data/.*|  (.*/|)\\.Rprofile| (.*/|)\\.Renviron| (.*/|)\\.gitignore| (.*/|)NAMESPACE| (.*/|)WORDLIST| (.*/|)\\.travis.yml| (.*/|)appveyor.yml| (.*/|)\\.Rbuildignore| (.*/|)\\.pre-commit-.*| .*\\.[rR]| .*\\.Rproj| .*\\.py| .*\\.feather| .*\\.rds| .*\\.Rds| .*\\.sh| .*\\.RData )$\n",
            "require_serial": true
        },
        {
            "id": "deps-in-desc",
            "name": "deps-in-desc",
            "description": "Check if dependencies that can be parsed from code are in DESCRIPTION.",
            "entry": "inst/bin/deps-in-desc",
            "language": "script",
            "files": "\\.[rR]$"
        },
        {
            "id": "lintr",
            "name": "lintr",
            "description": "check if a .R file is lint free (using lintr)",
            "entry": "inst/bin/lintr",
            "language": "script",
            "files": "\\.[rR]$"
        }
    ],
    "https://github.com/FelixSeptem/pre-commit-golang": [
        {
            "id": "bazel-buildifier",
            "name": "bazel buildifier",
            "entry": "run-bazel-buildifier.sh",
            "files": "BUILD.bazel|BUILD",
            "language": "script",
            "description": "Runs `buildifier`, requires bazel buildifier"
        },
        {
            "id": "go-imports",
            "name": "go imports",
            "entry": "run-go-imports.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go imports`, requires golang"
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "run-go-critic.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `go-critic`, requires go-critic"
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "run-golangci-lint.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint`, requires golangci-lint"
        },
        {
            "id": "golangci-lint-conf",
            "name": "golangci-lint-conf",
            "entry": "run-golangci-lint-conf.sh",
            "files": "\\.go$",
            "language": "script",
            "description": "Runs `golangci-lint` read local config file, requires golangci-lint"
        }
    ],
    "https://gitlab.com/daverona/pre-commit-cpp": [
        {
            "id": "clang-format",
            "name": "formatter of C/C++ code",
            "description": "Run clang-format against C/C++ header and source files",
            "language": "system",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "clang-format -i",
            "args": [
                "-style=Google"
            ]
        },
        {
            "id": "cpplint",
            "name": "linter for Google C++ Style Guide",
            "description": "Run cpplint against C/C++ header and source files",
            "language": "python",
            "files": "\\.(h\\+\\+|h|hh|hxx|hpp|cuh|c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "cpplint"
        },
        {
            "id": "cppcheck",
            "name": "static analyzer of C/C++ code",
            "description": "Run cppcheck against C/C++ source files",
            "language": "system",
            "files": "\\.(c|cc|cpp|cu|c\\+\\+|cxx|tpp|txx)$",
            "entry": "cppcheck --error-exitcode=1"
        }
    ],
    "https://github.com/codingjoe/relint": [
        {
            "id": "relint",
            "name": "relint",
            "description": "Write your own linting rules using regular expressions.",
            "entry": "relint",
            "language": "python",
            "types": [
                "file"
            ]
        }
    ],
    "https://github.com/nix-community/nixpkgs-fmt": [
        {
            "id": "nixpkgs-fmt",
            "name": "nixpkgs-fmt",
            "description": "Format nix code with nixpkgs-fmt.",
            "entry": "nixpkgs-fmt",
            "language": "rust",
            "files": "\\.nix$",
            "minimum_pre_commit_version": "1.18.1"
        }
    ],
    "https://github.com/d6e/beancount-check": [
        {
            "id": "beancount-check",
            "name": "beancount-check",
            "entry": "bean-check",
            "language": "python",
            "files": ".*(.beancount|.ledger)$",
            "require_serial": true,
            "additional_dependencies": [
                "beancount"
            ]
        }
    ],
    "https://github.com/iconmaster5326/cmake-format-pre-commit-hook": [
        {
            "id": "cmake-format",
            "name": "cmake-format",
            "description": "Formats CMake list files.",
            "entry": "cmake-format",
            "language": "python",
            "files": "(CMakeLists.*|.*\\.cmake|.*\\.cmake.in)$",
            "args": [
                "-i"
            ],
            "require_serial": false,
            "additional_dependencies": []
        }
    ],
    "https://github.com/thg-consulting/inspectortiger": [
        {
            "id": "inspectortiger",
            "name": "inspectortiger",
            "description": "Inspects your code",
            "entry": "inspectortiger",
            "language": "python",
            "language_version": "python3.7",
            "require_serial": true,
            "verbose": true,
            "types": [
                "python"
            ]
        }
    ],
    "https://gitlab.com/iamlikeme/nbhooks": [
        {
            "id": "nb-ensure-clean",
            "name": "nb-ensure-clean",
            "description": "Ensure that committed Jupyter notebooks contain no outputs.",
            "entry": "nb-ensure-clean",
            "files": "\\.ipynb$",
            "language": "python",
            "language_version": "python3"
        }
    ],
    "https://github.com/Kuniwak/vint": [
        {
            "id": "vint",
            "name": "Vint Vim script linting",
            "description": "Lints all vim files",
            "language": "python",
            "entry": "vint",
            "types": [
                "vim"
            ]
        }
    ],
    "https://github.com/eschulte/lisp-format": [
        {
            "id": "lisp-format",
            "name": "formatter of lisp code",
            "description": "Run lisp-format against lisp files",
            "language": "system",
            "files": "\\.(lisp|cl|asd|scm|el)$",
            "entry": "lisp-format -i"
        }
    ],
    "https://github.com/shellcheck-py/shellcheck-py": [
        {
            "id": "shellcheck",
            "name": "shellcheck",
            "description": "Test shell scripts with shellcheck",
            "entry": "shellcheck",
            "language": "python",
            "types": [
                "shell"
            ],
            "require_serial": true
        }
    ],
    "https://github.com/APIDevTools/swagger-cli": [
        {
            "id": "swagger-validation",
            "name": "swagger-validation",
            "entry": "swagger-cli",
            "description": "Hook to validate swagger specs.",
            "language": "node",
            "files": "(openapi|swagger).*\\.(json|ya?ml)$",
            "args": [
                "validate"
            ]
        }
    ],
    "https://github.com/kynan/nbstripout": [
        {
            "id": "nbstripout",
            "name": "nbstripout",
            "description": "nbstripout: strip output from Jupyter and IPython notebooks",
            "entry": "nbstripout",
            "language": "python",
            "files": "\\.ipynb$"
        }
    ],
    "https://gitlab.com/devopshq/gitlab-ci-linter": [
        {
            "id": "gitlab-ci-linter",
            "name": ".gitlab-ci.yml linter",
            "description": "Validates .gitlab-ci.yml file (pure-python version without dependencies)",
            "entry": "gitlab-ci-linter",
            "language": "python",
            "language_version": "python3",
            "pass_filenames": false,
            "files": ".gitlab-ci.yml"
        }
    ],
    "https://github.com/bmorcos/pre-commit-hooks-cpp": [
        {
            "id": "clang-format",
            "name": "clang-format",
            "description": "Format C code using clang-format.",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "clang-format -i",
            "args": [
                "-style=Google"
            ]
        },
        {
            "id": "cpplint",
            "name": "cpplint",
            "description": "Check style of C code using cpplint.",
            "language": "python",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "cpplint",
            "args": [
                "--verbose=3"
            ]
        },
        {
            "id": "cppcheck",
            "name": "cppcheck",
            "description": "Check correctness of C code using cppcheck.",
            "language": "system",
            "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$",
            "entry": "cppcheck --error-exitcode=1",
            "args": [
                "--enable=warning"
            ]
        }
    ],
    "https://github.com/igorshubovych/markdownlint-cli": [
        {
            "id": "markdownlint",
            "name": "markdownlint",
            "description": "Checks the style of Markdown/Commonmark files.",
            "entry": "markdownlint",
            "language": "node",
            "types": [
                "markdown"
            ],
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/TekWizely/pre-commit-golang": [
        {
            "id": "go-build-mod",
            "name": "go-build-mod",
            "entry": "go-build-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go build -o /dev/null [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-build-pkg",
            "name": "go-build-pkg",
            "entry": "go-build-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go build -o /dev/null [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-build-repo-mod",
            "name": "go-build-repo-mod",
            "entry": "go-build-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go build -o /dev/null [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-build-repo-pkg",
            "name": "go-build-repo-pkg",
            "entry": "go-build-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go build -o /dev/null [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-critic",
            "name": "go-critic",
            "entry": "go-critic.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gocritic check [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-fmt",
            "name": "go-fmt",
            "entry": "go-fmt.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'gofmt -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-imports",
            "name": "go-imports",
            "entry": "go-imports.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goimports -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-lint",
            "name": "go-lint",
            "entry": "go-lint.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golint -set_exit_status [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-returns",
            "name": "go-returns",
            "entry": "go-returns.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'goreturns -l -d [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "go-test-mod",
            "name": "go-test-mod",
            "entry": "go-test-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go test [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-test-pkg",
            "name": "go-test-pkg",
            "entry": "go-test-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go test [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-test-repo-mod",
            "name": "go-test-repo-mod",
            "entry": "go-test-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go test [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-test-repo-pkg",
            "name": "go-test-repo-pkg",
            "entry": "go-test-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go test [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-vet-mod",
            "name": "go-vet-mod",
            "entry": "go-vet-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); go vet [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-vet-pkg",
            "name": "go-vet-pkg",
            "entry": "go-vet-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "go-vet-repo-mod",
            "name": "go-vet-repo-mod",
            "entry": "go-vet-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); go vet [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "go-vet-repo-pkg",
            "name": "go-vet-repo-pkg",
            "entry": "go-vet-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "go-vet",
            "name": "go-vet",
            "entry": "go-vet.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'go vet [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        },
        {
            "id": "golangci-lint-mod",
            "name": "golangci-lint-mod",
            "entry": "golangci-lint-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root $FILE); golangci-lint run [$ARGS] ./...' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "golangci-lint-pkg",
            "name": "golangci-lint-pkg",
            "entry": "golangci-lint-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] ./$(dirname $FILE)' for each staged .go file",
            "pass_filenames": true,
            "require_serial": true
        },
        {
            "id": "golangci-lint-repo-mod",
            "name": "golangci-lint-repo-mod",
            "entry": "golangci-lint-repo-mod.sh",
            "files": "(\\.go$)|(\\bgo\\.mod$)",
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'cd $(mod_root); golangci-lint run [$ARGS] ./...' for each module in the repo",
            "pass_filenames": false
        },
        {
            "id": "golangci-lint-repo-pkg",
            "name": "golangci-lint-repo-pkg",
            "entry": "golangci-lint-repo-pkg.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] ./...' in repo root folder",
            "pass_filenames": false
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "golangci-lint.sh",
            "types": [
                "go"
            ],
            "exclude": "(^|/)vendor/",
            "language": "script",
            "description": "Run 'golangci-lint run [$ARGS] $FILE' for each staged .go file",
            "pass_filenames": true
        }
    ],
    "https://github.com/markdownlint/markdownlint": [
        {
            "id": "markdownlint",
            "name": "Markdownlint",
            "description": "Run markdownlint on your Markdown files",
            "entry": "mdl",
            "language": "ruby",
            "files": "\\.(md|mdown|markdown)$"
        }
    ],
    "https://github.com/jguttman94/pre-commit-gradle": [
        {
            "id": "gradle-check",
            "name": "gradle check",
            "description": "Runs java unit tests using gradle check",
            "entry": "gradle-check",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-build",
            "name": "gradle build",
            "description": "Builds java project using \"gradle build\"",
            "entry": "gradle-build",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-spotless",
            "name": "gradle spotless",
            "description": "Lints java project using \"gradle spotlessJavaCheck spotlessJavaApply\"",
            "entry": "gradle-spotless",
            "language": "python",
            "pass_filenames": false
        },
        {
            "id": "gradle-task",
            "name": "gradle task",
            "description": "Runs arbitrary gradle tasks for java project",
            "entry": "gradle-task",
            "language": "python",
            "pass_filenames": false
        }
    ],
    "https://github.com/Yelp/detect-secrets": [
        {
            "id": "detect-secrets",
            "name": "Detect secrets",
            "description": "Detects high entropy strings that are likely to be passwords.",
            "entry": "detect-secrets-hook",
            "args": [
                "--base64-limit",
                "4.5",
                "--hex-limit",
                "3"
            ],
            "language": "python",
            "files": ".*"
        }
    ],
    "https://github.com/dmitri-lerko/pre-commit-docker-kustomize": [
        {
            "id": "kustomize",
            "name": "kustomize (via docker)",
            "description": "kustomize provided by docker",
            "entry": "kustomize build",
            "language": "docker",
            "args": [
                "overlay/production-us"
            ],
            "always_run": true,
            "pass_filenames": false
        }
    ],
    "https://github.com/perltidy/perltidy": [
        {
            "id": "perltidy",
            "name": "perltidy",
            "description": "Run the perltidy source code formatter on Perl source files",
            "minimum_pre_commit_version": "2.1.0",
            "entry": "perltidy --nostandard-output --backup-and-modify-in-place",
            "args": [
                "--standard-error-output",
                "--backup-file-extension=/"
            ],
            "language": "perl",
            "types": [
                "perl"
            ]
        }
    ],
    "https://github.com/talos-systems/conform": [
        {
            "id": "conform",
            "name": "Conform",
            "description": "Run 'conform enforce' for policy enforcement",
            "entry": "conform enforce --commit-msg-file",
            "language": "golang",
            "stages": [
                "commit-msg"
            ]
        }
    ],
    "https://github.com/twu/skjold": [
        {
            "id": "skjold",
            "name": "skjold",
            "description": "Security audit Python project dependencies against security advisory databases.",
            "entry": "skjold audit",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "files": "^(poetry\\.lock|Pipfile\\.lock|requirements.*\\.txt)$"
        }
    ],
    "https://github.com/woile/commitizen": [
        {
            "id": "commitizen",
            "name": "commitizen check",
            "description": "Check whether the commit message follows commiting rules",
            "entry": "cz check --commit-msg-file",
            "language": "python",
            "language_version": "python3",
            "require_serial": true,
            "minimum_pre_commit_version": "0.15.4"
        }
    ],
    "https://github.com/gherynos/pre-commit-java": [
        {
            "id": "pmd",
            "name": "pmd",
            "description": "Runs the PMD static code analyzer.",
            "language": "docker",
            "entry": "/bin/bash /opt/run_pmd.sh",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "cpd",
            "name": "cpd",
            "description": "Runs the Copy/Paste Detector (CPD).",
            "language": "docker",
            "entry": "/bin/bash /opt/run_cpd.sh",
            "files": "\\.java$",
            "require_serial": true
        },
        {
            "id": "checkstyle",
            "name": "checkstyle",
            "description": "Runs the Checkstyle static code analysis tool.",
            "language": "docker",
            "entry": "/bin/bash /opt/run_checkstyle.sh",
            "files": "\\.java$",
            "require_serial": true
        }
    ],
    "https://github.com/JamesWoolfenden/pre-commit": [
        {
            "id": "terraform-fmt",
            "name": "terraform-fmt",
            "entry": "terraform-fmt",
            "description": "Rewrite Terraform configuration files to a canonical format and style, cross platform compatible",
            "language": "python",
            "files": "(\\.tf|\\.tfvars)$",
            "exclude": "\\.terraform\\/.*$"
        },
        {
            "id": "checkov-scan",
            "name": "checkov",
            "description": "runs checkov over a project, cross platform compatible",
            "entry": "checkov-scan",
            "language": "python",
            "language_version": "python3.7",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$",
            "always_run": false,
            "pass_filenames": false,
            "verbose": true,
            "additional_dependencies": [
                "checkov"
            ]
        },
        {
            "id": "tf2docs",
            "name": "tf2docs",
            "description": "builds markdown docs, cross platform compatible",
            "entry": "tf2docs",
            "language": "python",
            "language_version": "python3.7",
            "files": "(\\.tf)$",
            "exclude": "\\.terraform\\/.*$",
            "always_run": false,
            "pass_filenames": false,
            "verbose": true
        }
    ],
    "https://github.com/lietu/go-pre-commit": [
        {
            "id": "errcheck",
            "name": "errcheck",
            "entry": "go-pre-commit errcheck",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go source code with errcheck"
        },
        {
            "id": "go-fmt-goimports",
            "name": "go-fmt-goimports",
            "entry": "go-pre-commit go-fmt-goimports",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with go fmt and goimports"
        },
        {
            "id": "go-test",
            "name": "go-test",
            "entry": "go-pre-commit go-test",
            "files": "\\.go$",
            "language": "system",
            "description": "Run your Go unit tests"
        },
        {
            "id": "go-vet",
            "name": "go-vet",
            "entry": "go-pre-commit go-vet",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go source with go vet"
        },
        {
            "id": "gofumports",
            "name": "gofumports",
            "entry": "go-pre-commit gofumports",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with gofumports"
        },
        {
            "id": "gofumpt",
            "name": "gofumpt",
            "entry": "go-pre-commit gofumpt",
            "files": "\\.go$",
            "language": "system",
            "description": "Format your Go code with gofumpt"
        },
        {
            "id": "golangci-lint",
            "name": "golangci-lint",
            "entry": "go-pre-commit golangci-lint",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with golangci-lint"
        },
        {
            "id": "golint",
            "name": "golint",
            "entry": "go-pre-commit golint",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with golint"
        },
        {
            "id": "staticcheck",
            "name": "staticcheck",
            "entry": "go-pre-commit staticcheck",
            "files": "\\.go$",
            "language": "system",
            "description": "Check your Go code with staticcheck"
        }
    ],
    "https://github.com/macisamuele/language-formatters-pre-commit-hooks": [
        {
            "id": "pretty-format-golang",
            "name": "Go Formatter",
            "description": "Runs gofmt over golang source files.",
            "entry": "pretty-format-golang",
            "language": "python",
            "types": [
                "go"
            ],
            "files": "^.+\\.go$",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-ini",
            "name": "Pretty format INI",
            "description": "This hook sets a standard for formatting INI  files.",
            "entry": "pretty-format-ini",
            "language": "python",
            "types": [
                "ini"
            ],
            "files": "^.*\\.ini$",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-java",
            "name": "Google Java Formatter",
            "description": "Runs Google Java Formatter over Java source files",
            "entry": "pretty-format-java",
            "language": "python",
            "types": [
                "java"
            ],
            "files": "^.+\\.java$",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-kotlin",
            "name": "KTLint",
            "description": "Runs KTLint over Kotlin source files",
            "entry": "pretty-format-kotlin",
            "language": "python",
            "types": [
                "kotlin"
            ],
            "files": "^.+\\.kt$",
            "minimum_pre_commit_version": "0.15.0",
            "require_serial": true
        },
        {
            "id": "pretty-format-rust",
            "name": "cargo-fmt",
            "description": "Runs cargo fmt over Rust source files",
            "entry": "pretty-format-rust",
            "language": "python",
            "types": [
                "rust"
            ],
            "files": "^.+\\.rs$",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-toml",
            "name": "Pretty format TOML",
            "description": "This hook sets a standard for formatting TOML files.",
            "entry": "pretty-format-toml",
            "language": "python",
            "types": [
                "toml"
            ],
            "files": "^.*\\.toml$",
            "minimum_pre_commit_version": "0.15.0"
        },
        {
            "id": "pretty-format-yaml",
            "name": "Pretty format YAML",
            "description": "This hook sets a standard for formatting YAML files.",
            "entry": "pretty-format-yaml",
            "language": "python",
            "types": [
                "yaml"
            ],
            "files": "^.*\\.(yaml|yml)$",
            "minimum_pre_commit_version": "0.15.0"
        }
    ],
    "https://github.com/jlebar/pre-commit-hooks": [
        {
            "id": "bazel-buildifier",
            "name": "bazel buildifier",
            "description": "Runs `buildifier`, requires buildifier binary",
            "entry": "buildifier",
            "files": "^(.*/)?(BUILD\\.bazel|BUILD)$|\\.BUILD$",
            "language": "system"
        },
        {
            "id": "do-not-submit",
            "name": "DO NOT SUBMIT",
            "description": "Forbids the string \"DO NOT SUBMIT\".",
            "entry": "check_do_not_submit.py",
            "language": "script",
            "files": ".*"
        },
        {
            "id": "clang-format",
            "name": "clang-format",
            "entry": "clang_format.py",
            "language": "script",
            "require_serial": true
        }
    ],
    "https://github.com/jazzband/pip-tools": [
        {
            "id": "pip-compile",
            "name": "pip-compile",
            "description": "Automatically compile requirements.",
            "entry": "pip-compile",
            "language": "python",
            "files": "^requirements\\.(in|txt)$",
            "pass_filenames": false
        }
    ],
    "https://github.com/pappasam/toml-sort": [
        {
            "id": "toml-sort",
            "name": "toml-sort",
            "entry": "toml-sort",
            "args": [
                "--check"
            ],
            "language": "python",
            "types": [
                "toml"
            ]
        }
    ],
    "https://github.com/arenadotio/pre-commit-ocamlformat": [
        {
            "id": "ocamlformat",
            "name": "ocamlformat",
            "description": "Auto-formatter for OCaml code",
            "entry": "ocamlformat",
            "language": "system",
            "files": "\\.mli?$",
            "args": [
                "-i"
            ]
        }
    ],
    "https://github.com/myint/rstcheck": [
        {
            "id": "rstcheck",
            "name": "rstcheck",
            "entry": "rstcheck",
            "language": "python",
            "types": [
                "rst"
            ]
        }
    ]
}